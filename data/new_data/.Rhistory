pop_size = 250000000
p=0.88 # true population proportion
possible_responses = c(rep("S", p*pop_size),rep("N", (1-p)*pop_size))
n=1000/4 # sample size
n_polls = 10000 # Number of polls
computed_phats = rep(0,n_polls)
for (k in 1:n_polls) {
sample_responses = sample(possible_responses, size = n)
phat = sum(sample_responses == "S") / n
computed_phats[k]=phat
}
hist(computed_phats,breaks=40)
print(paste('Mean = ', mean(computed_phats)))
print(paste('Standard Error = ', sd(computed_phats)))
# In Lab 3, you compare theoretical and empirical probabilities
# Recall: sum(dairyqueen$cal_fat > 600)/length(dairyqueen$cal_fat)
#
dpois(4, 5)
1 - dpois(4, 5)
ppois(4, 5)
1 - ppois(4, 5)
1 - ppois(3, 5)
1 - ppois(3, 5)
1 - pposoi(9, 20)
1 - ppoois(9, 20)
1 - ppois(9, 20)
ppois(9, 20)
dpois(9, 20)
1 - dpois(9, 20)
dpois(9, 20)
ppois(9, 20)
ppois(10, 20)
dgeom(1500, 0.002)
1- dgeom(1500, 0.002)
dbinom(1500, 0.002)
dbinom(8,1500, 0.002)
head(iris)
1/9 * 1/36
.41 + .37 _ .16
.41 + .37 + .16
(0 * .41) + (1 * .37) + (2 * .16) + (3 * 3.05) + (4 * .01)
(0 * .41) + (1 * .37) + (2 * .16) + (3 * .05) + (4 * .01)
.41 + .37
.78 _ .16
.78 + .16
(0 * .41) + (1 * .37) + (4 * .16) + (9 * .05) + (16 * .01)
.88 * .88
1.62 - .7744
sqrt(0.8456)
0.05 + 0.02 + 0.05 + 0.10 + 0.03 + 0.10
0.1 + 0.03 + 0.10 + 0.05 + 0.02 + 0.05
data(iris)
mean(iris$Petal.Width)
sd(iris$Petal.Width)
fivenum(Petal.Length)
fivenum(iris$Petal.Length)
five_num <- fivenum(iris$Petal.Length)
help(five_num)
help(fivenum)
quantile(iris$Petal.Length, 0.25)
1 - quantile(iris$Petal.Length, 0.60)
quantile(iris$Petal.Length, 0.60)
fivenum(iris.Petal.Length)
fivenum(iris$Petal.Length)
quantile(iris$Petal.Length, 0.60)
dpois(500, 0.09)
ppois(500, 0.09)
pgeom(500, 0.09)
pbinom(0.91, 500)
pbinom(0.91, 500, 0.09)
pbinom(500, 5000, 0.09)
stdev <- 4.78
mu <- 72.6
qnorm(80, mu, stdev)
pnorm(, mu, stdev)
1 -pnorm(80, mu, stdev)
1 -pnorm(80, 72.6, 4.78)
pnorm(80, 72.6, 4.78) - pnorm(60, 72.6, 4.78)
qnorm(0.05, 72.6, 4.78)
1 -qnorm(0.05, 72.6, 4.78)
qnorm(0.05, 72.6, 4.78)
qnorm(0.95, 72.6, 4.78)
pnbinom(7, 6, .55)
pnbinom(7, 6, .55)
# march 28th
# plitical poll: find 95% confidence interval
# inputs
n <- 250
phat <- 0.58
# march 28th
# plitical poll: find 95% confidence interval
# inputs
n <- 250
phat <- 0.58
# march 28th
# plitical poll: find 95% confidence interval
# inputs
n <- 250
phat <- 0.58
SE = sqrt(phat*(1-phat)/n)
zcrit = qnorm(0.975)
MOE = zcrit*SE
lowerBound = phat - MOE
upperBound = phat + MOE
c(lowerBound, upperBound)
c(phat-MOE,phat+MOE)
# march 28th
# plitical poll: find 95% confidence interval
# inputs
n <- 250
phat <- 0.58
SE = sqrt(phat*(1-phat)/n)
zcrit = qnorm(0.9)
MOE = zcrit*SE
lowerBound = phat - MOE
upperBound = phat + MOE
c(lowerBound, upperBound)
c(phat-MOE,phat+MOE)
zcrit = qnorm(0.99)
# march 28th
# plitical poll: find 95% confidence interval
# inputs
n <- 250
phat <- 0.58
SE = sqrt(phat*(1-phat)/n)
zcrit = qnorm(0.99)
MOE = zcrit*SE
lowerBound = phat - MOE
upperBound = phat + MOE
c(lowerBound, upperBound)
c(phat-MOE,phat+MOE)
n <- 1000
phat <- 0.887
zcrit = qnorm(0.975)
MOE = zcrit*SE
lowerBound = phat - MOE
upperBound = phat + MOE
c(phat-MOE,phat+MOE)
n <- 1000
phat <- 0.887
zcrit = qnorm(0.975)
MOE = zcrit*SE
lowerBound = phat - MOE
upperBound = phat + MOE
c(phat-MOE,phat+MOE)
n <- 1000
phat <- 0.887
zcrit = qnorm(0.975)
MOE = zcrit*SE
c(phat-MOE,phat+MOE)
n <- 1000
phat <- 0.887
SE = sqrt(phat*(1-phat)/n)
zcrit = qnorm(0.975)
MOE = zcrit*SE
c(phat-MOE,phat+MOE)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 2.4) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Height in Inches",
x = "Median Household Income",
y = "Height in Inches",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
library(ggplot2)
library(readxl)
library(dplyr)
library(scales)
setwd("/Users/davidsosa/Code/school/regression-analysis/projects/height-vs-gdp/data/new_data")
height_data_by_state <- read_excel("Data.xlsx", sheet = "Average Height in Inches")
median_house_income_by_state <- read_excel("Data.xlsx", sheet = "Median Household Income")
merged_data <- merge(height_data_by_state, median_house_income_by_state, by = "State")
merged_data$MedianAnnualHouseholdIncome <- as.numeric(gsub("[$,]", "", merged_data$MedianAnnualHouseholdIncome))
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 2.4) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Height in Inches",
x = "Median Household Income",
y = "Height in Inches",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 2.4) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height",
x = "Median Household Income",
y = "Height in Inches",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 2.4) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height",
x = "Median Household Income",
y = "Height (inches)",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 3) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height",
x = "Median Household Income",
y = "Height (inches)",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 3) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height Per State",
x = "Median Household Income",
y = "Height (inches)",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
library(ggplot2)
library(readxl)
library(dplyr)
library(scales)
setwd("/Users/davidsosa/Code/school/regression-analysis/projects/height-vs-gdp/data/new_data")
gdp_per_state <- read_excel("Data.xlsx", sheet = "gdp_per_state")
avg_height_state <- read_excel("Data.xlsx", sheet = "Average Height in Inches")
data <- merge(gdp_per_state, avg_height_state, by ="State")
data$GDP_adjusted <- ifelse(data$GDP >= 1e9, data$GDP / 1e9, data$GDP / 1e6)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_size(range = c(5, 10)) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "State GDP vs Average Height",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_size(range = c(4, 7)) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "State GDP vs Average Height",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_size(range = c(4, 7)) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in each state",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_size(range = c(4, 7)) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 3) +
geom_smooth() +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height Per State",
x = "Median Household Income",
y = "Height (inches)",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(merged_data, aes(x = MedianAnnualHouseholdIncome, y = `Average Height (inches)`, color = MedianAnnualHouseholdIncome)) +
geom_point(size = 3) +
scale_color_gradient(low="lightblue", high="blue") +
labs(title = "Median Household Income vs Average Height Per State",
x = "Median Household Income",
y = "Height (inches)",
fill = "Gender") +
scale_x_continuous(labels = comma) +  # Format x-axis with commas
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 20, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 16, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
library(ggplot2)
library(readxl)
library(dplyr)
library(scales)
setwd("/Users/davidsosa/Code/school/regression-analysis/projects/height-vs-gdp/data/new_data")
gdp_per_state <- read_excel("Data.xlsx", sheet = "gdp_per_state")
avg_height_state <- read_excel("Data.xlsx", sheet = "Average Height in Inches")
data <- merge(gdp_per_state, avg_height_state, by ="State")
data$GDP_adjusted <- ifelse(data$GDP >= 1e9, data$GDP / 1e9, data$GDP / 1e6)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_size(range = c(4, 7)) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted, size = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted)) +
geom_point(size = 4,alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted)) +
geom_point(size = 5,alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
ggplot(data, aes(x = GDP_adjusted, y = `Average Height (inches)`, color = GDP_adjusted)) +
geom_point(size = 4,alpha = 0.8) +
scale_color_gradient(low = "lightblue", high = "blue") +
labs(title = "GDP vs Average Height in Each State",
x = "GDP (Billions)",
y = "Height (inches)",
color = "GDP Scale",
size = "GDP Scale") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", family = "Arial"),  # Title bold
axis.title = element_text(size = 14, face = "bold", family = "Arial"),  # Axis labels bold
axis.text = element_text(size = 12, family = "Arial"),  # Axis numbers
legend.title = element_text(size = 12, face = "bold", family = "Arial"),  # Legend bold
legend.text = element_text(size = 11, family = "Arial")  # Legend values
)
