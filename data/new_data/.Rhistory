s = 10
p0 = 1/6
phat = s / n
se = sqrt(phat * (1 - phat) / n)
# problem 5
n = 46
s = 10
p0 = 1/6
phat = s / n
se = sqrt(p0 * (1 - p0) / n)
z = (phat - p0) / se
# problem 5
n = 46
s = 10
p0 = 1/6
phat = s / n
se = sqrt(p0 * (1 - p0) / n)
z = (phat - p0) / se
1 - z
1 - pnorm(z)
phat1 = 44 / 500
phat2 4 / 22000
phat2 = 4 / 22000
phat1 = 44 / 500
phat2 = 4 / 22000
phat1 = 44 / 500
phat2 = 4 / 22000
phat_pooled = (44 + 4) /(women + men)
# problem 6
men = 500
women = 2200
phat1 = 44 / 500
phat2 = 4 / 22000
phat_difference = phat2 - phat1
phat_pooled = (44 + 4) /(women + men)
phat_difference = phat2 - phat1
se_pooled = sqrt(phat_pooled * (1 - phat_pooled) * (1 / placebo_total + 1 / drug_total))
se_pooled = sqrt(phat_pooled * (1 - phat_pooled) * (1 / men + 1 / women))
z_statistic = ((phat1 - phat2) - 0) / se_pooled
1 - pnorm(z_statistic)
1 - pnorm(z)
phat1 = 44 / 500
phat2 = 4 / 22000
z_statistic = (phat1 - phat2) / se_pooled
se_pooled = sqrt((phat_pooled * (1 - phat_pooled)) * ((1 / men) + (1/women)))
z_statistic = (phat1 - phat2) / se_pooled
# homework 8
men = 850
women = 2550
men_s = 78
women_s = 6
se_pooled = sqrt((ppooled * (1 - ppooled)) * ((1 / men) + (1 / women))
ppooled = (men_s + women_s) / (men + women)
men_s = 78
women_s = 6
phat_difference = phat2 - phat1
ppooled = (men_s + women_s) / (men + women)
se_pooled = sqrt((ppooled * (1 - ppooled)) * ((1 / men) + (1 / women))
phat1 = men_s / men
phat2 = women_s / women
# homework 8
men = 850
women = 2550
men_s = 78
women_s = 6
phat1 = men_s / men
phat2 = women_s / women
phat_difference = phat2 - phat1
ppooled = (men_s + women_s) / (men + women)
se_pooled = sqrt((ppooled * (1 - ppooled)) * ((1 / men) + (1 / women))
se_pooled = sqrt((ppooled * (1 - ppooled)) * ((1 / men) + (1 / women)))
ppooled = (men_s + women_s) / (men + women)
se_pooled = sqrt((ppooled * (1 - ppooled)) * ((1 / men) + (1 / women)))
z = (phat1 - phat2) / se_pooled
1 - pnorm(z)
pnorm(z)
phat_difference = phat2 - phat1
phat_difference = phat1 - phat2
phat_difference * se_pooled
phat_difference * z
phat_difference * se_pooled
phat_difference * ppooled
zcrit = qnorm(0.01)
zcrit = qnorm(1 -0.01)
zcrit = qnorm((1 -0.01) /2)
zcrit = qnorm(0.01 /2)
# two tailed so you divide it in 2
zcrit = qnorm(0.995 /2)
# two tailed so you divide it in 2
zcrit = qnorm(0.995)
# two tailed so you divide it in 2
alpha = 0.01
alpha = alpha / 2
zcrit = qnorm(1 - alpha)
# calculating MOE
moe = zcrit * phat_difference
# calculating SE
result_phat1 = (phat1 * (1 - phat1) / men)
result_phat2 = (phat2 * (1 - phat2) / women)
sqrt(result_phat1 + result_phat2)
se = sqrt(result_phat1 + result_phat2)
# calculating MOE
moe = se * zcrit
# confidence interval
lower = (phat1 - phat2) + moe
upper = (phat1 -phat2) - moe
# confidence interval
lower = (phat1 - phat2) - moe
upper = (phat1 -phat2) + moe
conventional = 2500
new_method = 2500
conventional_sample = 100
conventional_sample_s = 78
new_method_sample = 100
new_method_sample_s = 83
phat1 = new_method_sample_s / new_method_sample
phat2 = conventional_sample_s / conventional_sample
conventional = 2500
new_method = 2500
conventional_sample = 100
conventional_sample_s = 78
new_method_sample = 100
new_method_sample_s = 83
phat1 = new_method_sample_s / new_method_sample
phat2 = conventional_sample_s / conventional_sample
result_phat1 = sqrt(phat1 * (1 -phat1) / new_method_sample)
result_phat2 = sqrt(phat2 * (1 -phat2) / conventional_sample)
se = sqrt(result_phat1 + result_phat2)
alpha = 0.05 / 2
zcrit = qnorm(1 - alpha)
moe = se * zcrit
lower = (phat1 - phat2) - moe
upper = (phat1 - phat2) + moe
mu = 6 / sqrt(5)
mu = 6 / sqrt(5)
# 1
1 - pnorm(210, 200, 6)
se = 6 / sqrt(5)
se = 6 / sqrt(40)
1 - pnorm(210, 200, se)
1 - pnorm(210, 200, se)
# 1
1 - pnorm(210, 200, 6)
# 1
1 - pnorm(210, 200, 6)
# 2
1 - pnorm(210, 200, 6/sqrt(5))
# 3
1 - pnorm(210, 200, 6/sqrt(40))
# 2
1 - pnorm(210, 200, 6/sqrt(5))
# 3
1 - pnorm(210, 200, 6/sqrt(40))
# 3
pnorm(210, 200, 6/sqrt(40))
1 - qt(t, df - 1)
# R Practice with teh t-distribution
t = 1.6
df = 14
1 - pt(t, df - 1)
pt(t, df - 1)
pt(t, 14)
1 - pt(1.6, 14)
qt(0.99, 19)
1 - pt(2.30, 10)
# 2
qt(.10, 15)
# 3
qt(0.025, 20)
#1
1 - pt(2.30, 10)
# 2
qt(.10, 15)
# 3
qt(0.025, 20)
# 2
qt(.9, 15)
# 3
qt(0.025, 20)
#example hypothesis test for sample means
# h0: µ = 70 hA: µ ≠ 70
n = 45
xbar = 63
s = 22
se = s / sqrt(n)
df = n - 1
test_statistic = (xbar - 70) / se
p_value = 2 * pt(-2.134, 44)
# setting up 95 confidence interval
lower = xbar - test_statistic * se
upper = xbar + test_statistic * se
# setting up 95 confidence interval
t_crit = qt(0.975, df)
lower = xbar - t_crit * se #
upper = xbar + t_crit * se #
n = 300
phat = 0.5
moe = 1.96 * sqrt(phat * ((1 - phat)) / n)
moe = 1.96 * sqrt(phat * ((1 - phat)) / n)
# 1
n = 400
phat = 0.5
moe = 1.96 * sqrt(phat * ((1 - phat)) / n)
# moe < 0.05
1.96 * sqrt(0.25/n)
# moe < 0.05
0.05 / 1.96
install.packages("openintro")
library(openintro)
library(openintro)
library(openintro)
library(openintro)
data(acs12)
force(acs12)
View(acs12)
table(acs12)
table(acs12$employment, acs12$gender)
View(acs12)
employed <- subset(acs12, employment == "employed")
View(employed)
table(employed$gender)
prop.test(table(employed$gender), p = c(0.5,0.5))
prop.test(table(employed$gender), p = c(0.5,0.5))
prop.test(table(employed$gender), p = c(0.5, 0.5))
View(acs12)
View(employed)
unique(employed$gender)
table(employed$gender)
prop.test(table(employed$gender), p = c(0.5, 0.5))
p = 0.5
prop.test(table(employed$gender), p = c(0.5, 0.5))
prop.test(x = sum(employed$gender == "Male")
n = length(employed$gender),
prop.test(x = sum(employed$gender == "Male"),
n = length(employed$gender),
p = 0.5,
altnerative = "two.sided")
prop.test(x = sum(employed$gender == "male"),
n = length(employed$gender),
p = 0.5,
altnerative = "two.sided")
prop.test(x = sum(employed$gender == "male"),
n = length(employed$gender),
p = 0.5,
alternative = "two.sided")
over24
# 5
over24 <- subset(acs12, age >= 24)
over24
table(over24)
table(over24)
# 5
over24 <- subset(acs12, age >= 24)
table(over24)
View(over24)
table(over24$edu)
college_plus <- sum(over24$edu %in% c("college", "graduate"))
# 6
noncitizens <- subset(acs12, citizen == "non-citizen")
table(noncitizens$gender)
prop.test(table(noncitizens$gender), p = c(0.5, 0.5))
prop.test(x = sum(employed$gender == "male"),
n = length(employed$gender),
p = 0.5,
alternative = "two.sided")
# exercise 4
library(acs12)
acs12$employment
employed = table(acs12$employment, acs12$gender)
employed = subset(acs12$employment, acs12$gender)
employed = subset(acs12, employment == "employed")
View(employed)
x = sum(employed)
n = length(employed$gender)
phat = x / n
x = sum(employed$gender == "male")
n = length(employed$gender)
phat = x / n
# exercise 4
# h0: p = 0.5
# h1: p ≠ 0.5
alpha = 0.05
employed = subset(acs12, employment == "employed")
x = sum(employed$gender == "male")
n = length(employed$gender)
phat = x / n
se = sqrt((p0 * (1 -p0)) / n)
p0 = 0.5
se = sqrt((p0 * (1 -p0)) / n)
z = (phat - p0) / se
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
library(openintro)
data(acs12)
# exercise 4
# h0: p = 0.5
# h1: p ≠ 0.5
alpha = 0.05
employed = subset(acs12, employment == "employed")
x = sum(employed$gender == "male")
n = length(employed$gender)
phat = x / n
p0 = 0.5
se = sqrt((p0 * (1 -p0)) / n)
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z))) # 0.00083
View(acs12)
View(acs12)
###############
# exercise 5
# h0: p = 31
# hA: p ≠ 31
over24 = subset(acs12, age >= 24)
View(over24)
x = sum(over24$edu %in% c("college", "graduate"))
n = nrow(over24)
phat = x / n
###############
# exercise 5
# h0: p = 31
# hA: p ≠ 31
over24 = subset(acs12, age >= 24)
x = sum(over24$edu %in% c("college", "graduate"))
n = nrow(over24)
phat = x / n
p0 = 0.31
se = sqrt((p0 * (1 - p0)) / n)
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
###############
# exercise 6
# h0: p = .5
# ha: p ≠ .5
non_citizens = subset(acs12, citizen == "yes")
View(non_citizens)
###############
# exercise 6
# h0: p = .5
# ha: p ≠ .5
non_citizens = subset(acs12, citizen == "no")
x = sum(non_citizens$gender == "male")
n = nrow(non_citizens$gender)
phat = x / n
p0 = 0.5
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
n = nrow(non_citizens$gender)
n = nrow(non_citizens)
n = nrow(non_citizens)
phat = x / n
p0 = 0.5
se = sqrt((p0 * (1 - p0)) / n)
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
n = length(non_citizens$gender)
phat = x / n
p0 = 0.5
se = sqrt((p0 * (1 - p0)) / n)
z = (phat - p0) / se
pvalue = 2 * (1 - pnorm(abs(z)))
###############
# exercise 7
data(russian_influence_on_us_election_2016)
force(russian_influence_on_us_election_2016)
View(russian_influence_on_us_election_2016)
View(russian_influence_on_us_election_2016)
responses = russian_influence_on_us_election_2016$influence_2016
responses = table(russian_influence_on_us_election_2016$influence_2016)
did_try = responses["Did try"]
n_total = sum(responses)
p1 = responses["Did try"]
did_try = responses["Did try"]
n_total = sum(responses)
phat = did_try / n_total
se = sqrt(phat * (1 - phat) / n)
responses = table(russian_influence_on_us_election_2016$influence_2016)
did_try = responses["Did try"]
n_total = sum(responses)
phat = did_try / n_total
x = did_try
n = n_total
z_p95 = 1.96
se = sqrt(phat * (1 - phat) / n)
ci_upper = phat + z_95 * se
z_p95 = 1.96
c(ci_lower, ci_upper)
ci_lower = phat - z_p95 * se
ci_upper = phat + z_p95 * se
c(ci_lower, ci_upper)
z_95 = 1.96
se = sqrt(phat * (1 - phat) / n)
ci_lower = phat - z_95 * se
ci_upper = phat + z_95 * se
c(ci_lower, ci_upper)
z_99 = 2.576
ci_lower_99 = phat - z_99 * se
ci_upper_99 = phat + z_99 * se
z_95 = 1.96
se = sqrt(phat * (1 - phat) / n)
ci_lower = phat - z_95 * se
ci_upper = phat + z_95 * se
c(ci_lower, ci_upper)
z_99 = 2.576
ci_lower_99 = phat - z_99 * se
ci_upper_99 = phat + z_99 * se
c(ci_lower_99, ci_upper_99)
# income by state
income_state_by_state = read_excel("Data.xlsx", sheet = "Income")
# income by state
income_state_by_state = read_excel("Data.xlsx", sheet = "income")
library(readxl)
library(ggplot2)
library(janitor)
library(dplyr)
setwd("/Users/davidsosa/Code/school/regression-analysis/projects/height-vs-gdp/data/new_data")
# running two separate regression men and women
average_height_male = read_excel("Data.xlsx", sheet = "Average Male Height 2022")
average_height_female = read_excel("Data.xlsx", sheet = "Average Female Height 2022")
demographics = read_excel("Data.xlsx", sheet = "demographic of each state")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
# income by state
income_state_by_state = read_excel("Data.xlsx", sheet = "income")
library(readxl)
library(ggplot2)
library(janitor)
library(dplyr)
setwd("/Users/davidsosa/Code/school/regression-analysis/projects/height-vs-gdp/data/new_data")
# running two separate regression men and women
average_height_male = read_excel("Data.xlsx", sheet = "Average Male Height 2022")
average_height_female = read_excel("Data.xlsx", sheet = "Average Female Height 2022")
demographics = read_excel("Data.xlsx", sheet = "demographic of each state")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
# income by state
income_state_by_state = read_excel("Data.xlsx", sheet = "income")
income_state_by_state %>%
filter(State2 == "Alaska") %>%
pull(`Median Income Male`)
# running two separate regression men and women
average_height_male = read_excel("Data.xlsx", sheet = "Average Male Height 2022")
demographics = read_excel("Data.xlsx", sheet = "demographic of each state")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
merged_data_male = average_height_male
merged_data_female = average_height_female
View(merged_data_female)
View(merged_data_male)
merged_data_male$income <- income_state_by_state$`Median Income Male`
merged_data_male <- merged_data_male |>
left_join(income_filtered, by = c("state_name" = "State"))
income_filtered <- income_state_by_state |>
filter(State2 %in% merged_data_male$State)
merged_data_male <- merged_data_male |>
left_join(income_filtered, by = c("state_name" = "State"))
View(income_filtered)
merged_data_male$income <- income_state_by_state$`Median Income Male`[match(merged_data_male$state_name, income_state_by_state$State)]
View(income_state_by_state)
merged_data_male$income <- income_state_by_state$`Median Income Male`[match(merged_data_male$State, income_state_by_state$State2)]
View(merged_data_male)
merged_data_female$income <- income_state_by_state$`Median Income Female`[match(merged_data_male$State, income_state_by_state$State2)]
View(merged_data_female)
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage
View(foreign_born_percentage)
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage <- foreign_born_percentage[, seq(2, ncol(df), by = 2)]  # keep every 1st, 3rd, 5th... column
valid_states <- state.name
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage", skip =1)
valid_states <- state.name
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage", skip =1)
# foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage", skip =1)
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage", skip =1)
valid_states <- state.name
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
valid_states <- state.name
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage <- foreign_born_percentage |>
mutate(Group = c("Native", "Foreign-born")) |>  # Add row labels if not present
pivot_longer(-Group, names_to = "State", values_to = "Share")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage <- foreign_born_percentage |>
mutate(Group = c("Native", "Foreign-born")) |>  # Add row labels if not present
pivot_longer(-Group, names_to = "State", values_to = "Share")
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
foreign_born_percentage <- foreign_born_percentage |>
mutate(Group = c("Native", "Foreign-born")) |>  # Add row labels if not present
pivot_longer(-Group, names_to = "State", values_to = "Share")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage <- foreign_born_percentage |>
mutate(Group = c("Native", "Foreign-born")) |>
pivot_longer(-Group, names_to = "State", values_to = "Share")
library(tidyr)
foreign_born_percentage <- foreign_born_percentage |>
mutate(Group = c("Native", "Foreign-born")) |>
pivot_longer(-Group, names_to = "State", values_to = "Share")
foreign_born_percentage <- foreign_born_percentage[, names(foreign_born_percentage) %in% valid_states]
View(income_state_by_state)
View(income_state_by_state)
View(foreign_born_percentage)
View(foreign_born_percentage)
View(income_filtered)
View(average_height_male)
View(foreign_born_percentage)
View(foreign_born_percentage)
foreign_born_percentage$Group <- c("Native", "Foreign-born")
foreign_born_percentage = read_excel("Data.xlsx", sheet="foreign_born_percentage")
foreign_born_percentage$Group <- c("Native", "Foreign-born")
